# Generated by Django 5.2.1 on 2025-06-09 10:32

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('role', models.CharField(choices=[('user', 'Normal User (Patient)'), ('nutritionist', 'Nutritionist'), ('admin', 'Admin'), ('owner', 'Owner'), ('operator', 'Operator')], default='user', max_length=20)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AppReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_date', models.DateField(auto_now_add=True)),
                ('new_users', models.IntegerField()),
                ('active_patients', models.IntegerField()),
                ('total_revenue', models.FloatField()),
                ('feedback_summary', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='FoodItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('calories', models.FloatField()),
                ('protein_g', models.FloatField()),
                ('carbs_g', models.FloatField()),
                ('fats_g', models.FloatField()),
                ('sugar_g', models.FloatField()),
                ('fiber_g', models.FloatField()),
                ('glycemic_index', models.FloatField(blank=True, null=True)),
                ('food_type', models.CharField(choices=[('vegetarian', 'Vegetarian'), ('non_vegetarian', 'Non-Vegetarian'), ('vegan', 'Vegan'), ('eggetarian', 'Eggetarian'), ('other', 'Other')], default='other', max_length=20)),
                ('suitable_for_conditions', models.CharField(choices=[('none', 'None'), ('diabetes', 'Diabetes'), ('thyroid', 'Thyroid'), ('hypertension', 'Hypertension')], default='none', max_length=50)),
                ('suitable_for_goal', models.CharField(choices=[('weight_loss', 'Weight Loss'), ('maintain', 'Maintain Weight'), ('gain_weight', 'Gain Weight')], default='maintain', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='Feedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('rating', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='NutritionistProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('expert_level', models.IntegerField(choices=[(1, 'Basic Nutritionist'), (2, 'Senior Nutritionist')], default=1)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='PatientReminder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='General Reminder', max_length=255)),
                ('message', models.TextField(blank=True, default='No message provided.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('date', models.DateTimeField(default=django.utils.timezone.now)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_reminders', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserMeal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('food_name', models.CharField(blank=True, max_length=100, null=True)),
                ('quantity', models.FloatField()),
                ('unit', models.CharField(choices=[('g', 'Grams'), ('kg', 'Kilograms'), ('ml', 'Milliliters'), ('l', 'Liters'), ('cup', 'Cup'), ('bowl', 'Bowl'), ('piece', 'Piece'), ('tbsp', 'Tablespoon'), ('tsp', 'Teaspoon'), ('slice', 'Slice'), ('other', 'Other')], default='g', max_length=10)),
                ('meal_type', models.CharField(choices=[('breakfast', 'Breakfast'), ('lunch', 'Lunch'), ('dinner', 'Dinner'), ('snack', 'Snack')], max_length=20)),
                ('consumed_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('remarks', models.TextField(blank=True)),
                ('calories', models.FloatField(blank=True, null=True)),
                ('protein', models.FloatField(blank=True, null=True)),
                ('carbs', models.FloatField(blank=True, null=True)),
                ('fats', models.FloatField(blank=True, null=True)),
                ('sugar', models.FloatField(blank=True, null=True)),
                ('fiber', models.FloatField(blank=True, null=True)),
                ('date', models.DateField(auto_now_add=True)),
                ('food_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='app.fooditem')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('age', models.PositiveIntegerField()),
                ('country', models.CharField(blank=True, max_length=100, null=True)),
                ('mobile_number', models.CharField(blank=True, max_length=15, null=True)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=10)),
                ('height_cm', models.FloatField()),
                ('weight_kg', models.FloatField()),
                ('activity_level', models.CharField(choices=[('sedentary', 'Sedentary'), ('light', 'Light Activity'), ('moderate', 'Moderate Activity'), ('active', 'Active'), ('very_active', 'Very Active')], max_length=50)),
                ('goal', models.CharField(choices=[('lose_weight', 'Lose Weight'), ('maintain', 'Maintain Weight'), ('gain_weight', 'Gain Weight')], max_length=20)),
                ('diet_type', models.CharField(choices=[('vegetarian', 'Vegetarian'), ('non_vegetarian', 'Non-Vegetarian'), ('vegan', 'Vegan'), ('eggetarian', 'Eggetarian'), ('other', 'Other')], default='other', max_length=20)),
                ('health_conditions', models.TextField(blank=True, help_text='e.g., hypertension')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='DiabeticProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hba1c', models.FloatField(help_text='HbA1c level (%)')),
                ('fasting_blood_sugar', models.FloatField(help_text='Fasting Blood Sugar (mg/dL)')),
                ('insulin_dependent', models.BooleanField(default=False)),
                ('medications', models.TextField(blank=True, null=True)),
                ('diagnosis_date', models.DateField()),
                ('user_profile', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='app.userprofile')),
            ],
        ),
        migrations.CreateModel(
            name='DietRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('general', 'General Recommendation'), ('diabetic', 'Diabetic-Specific Recommendation')], default='general', max_length=20)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('notes', models.TextField(blank=True)),
                ('reason', models.TextField(help_text='ML/logic-based reason')),
                ('sugar_limit_g', models.FloatField(blank=True, help_text='For diabetic recommendations', null=True)),
                ('glycemic_index_note', models.TextField(blank=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_recommendations', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('recommended_foods', models.ManyToManyField(to='app.fooditem')),
            ],
            options={
                'indexes': [models.Index(fields=['user', 'created_at'], name='app_dietrec_user_id_892f6f_idx')],
                'unique_together': {('user', 'created_at')},
            },
        ),
    ]
